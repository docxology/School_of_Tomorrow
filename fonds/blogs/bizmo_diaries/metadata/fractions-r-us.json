{
  "id": "1958134031811779128",
  "title": "Fractions R Us",
  "published": "2008-03-12T16:12:00.001-07:00",
  "updated": "2008-03-12T19:29:19.648-07:00",
  "content": "[](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj9tlPg72l65DoI98mI8xDyLBtqn0xWoz7KGeW3fBITLQT17OTx1R2ypaYusPDnRiBzbQr2s9Oy7jJcAtlHoCxWHxJRShIh7ZWV1OQvYTEIDDr7w12nbYszM_kvmK9KIEs5SC0T/s1600-h/congrats_anna.jpg):: congrats to anna ::[first posted to [Math Forum](http://mathforum.org/kb/thread.jspa?threadID=1711120&tstart=0), earlier today (typos fixed for this version, code colorized)]I'm noticing with our novel approach to teaching fractions, that we're discounting the importance of [the LCM](http://www.mathsteacher.com.au/year7/ch03_prime/03_lcm/lcm.htm) in connection with adding them.  The reason for that is our use of Euclid's Algorithm for [the GCD](http://www.mathsteacher.com.au/year7/ch03_prime/06_hcf/hcf.htm) upon instantiation, meaning when we create a fraction object, we automatically convert to the canonical delegate in each equivalence class,  namely that for which the numerator and denominator are relatively prime.The background context is \"building fractions\" (yes, this is constructionism) from the ground up, in some computer language facilitating operator overloading. That's right, we're doing some programming as a part of our standard mathematics curriculum, what of it? TIs have been programmable for years, and we've heard no one fussing (\"more features!\" has always been the battle cry, no?).As I've posted about numerous times here (math-teach), irrespective of whether programming's involved, it's interesting to see if a curriculum dodges Euclid's Method for finding the GCD, escaping into \"[factor trees](http://www.mathsteacher.com.au/year7/ch03_prime/07_prime/num.htm#factortree)\" (which I have nothing against -- very important for teaching the meaning of the Fundamental Theorem of Arithmetic).I'd call that a kind of litmus test, to see if your proposal meets minimum standards -- let's apply it to the states first and foremost, see which state legislatures are being lobbied intelligently, vs. getting fed a lot of mumbo jumbo.  Good project for a PhD candidate.So how do we add fractions then?  Of course the old fashioned way:  a/b + c/d == (a/b)(d/d) + (c/d)(b/b) == (ad + cb)/bd as justified by using multiplicative identity, other axioms (I'm sure Paul could help out here).Then you get gcd((ad + cb), bd)), call it thegcd (could be 1), so your new (reduced) numerator, denominator (p,q) become p/thegcd, q/thegcd (multiplying by x/x is to multiply by 1, the multiplicative identity -- this came up earlier, in justifying (a/b)==(a/b)(d/d).How does this look in actual Python?  Here's a fraction class (rational number class) developed to the point of enabling its instances (p/q) to multiply and add (p,q integers, q <> 0). Click for larger views.[](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg0FrzLQeqWt6asf3OfDBbp__hQ8KFFJ6uGy9Vs5MNUhKLlbKlqBUJScCIAqWcIFtFONzsLAN4LfB1-OS87egUZ-QGmniIeKtXMr6absL9YsChHWrM6394A0MCf85xa4A1IcMbY/s1600-h/qclass.jpg)[](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhwcU77khYNAm1k1k9HudbBWWO8646RyEqT4LfEUPHCdeKsTUupjDJq5FSaX2wv0TneqOa1DO9hT75DyRq5MOR8NxxUz-RcNmmjIVf7BUhPxmd5pkGRmt_JHStensRtdzd7r_I_/s1600-h/usingq.jpg)Kirby",
  "categories": [],
  "author": "Kirby Urner",
  "blog_name": "bizmo_diaries"
}