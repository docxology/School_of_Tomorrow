{
  "id": "4992761918380102802",
  "title": "Five Dimensions of Python",
  "published": "2017-09-26T21:23:00.002-07:00",
  "updated": "2017-10-02T23:28:26.220-07:00",
  "content": "Understand that I'm using the term \"dimension\" loosely, perhaps to structure a TED Talk, or TEDx or something similar.\n\nThe Roman orator, Cicero a role model, learned to break it down into chunks.\u00a0 If the chunks were too fine:\u00a0 a host of problems.\u00a0 Too big:\u00a0 problems there too.\n\nThe goal of the accomplished orator was to get the chunk size \"just right\" for the intended audience.\n\nThe first dimension is like your utility belt, so close to home base you consider its content basic, and full of \"built-ins\" as these tools are called.\n\nHere is your basic vocabulary for bootstrapping all the rest.\u00a0 Any classic Python shell provides them natively.\n\nIn __builtins__ you get your \"import\" (for expanding the vocabulary) and your \"open\" (for streaming), your several workhorse types: list and range (sequences), some number types (int, float, bool), the string type (str, another sequence), the dictionary (dict) and the set (the not-sequences or mappings).\n\nFunctions such as \"iter\" \"next\" and \"divmod\" grace the builtins, with \"property\" a built-in class (used as a decorator when the time comes).\u00a0 The large number of built-in exceptions are not \"junk DNA\" but rather the signalling system used to recover gracefully from inevitable glitches.\n\nBefore dimension one though, is dimension zero: the keywords. Forgive me for going out of sequence.\u00a0 The builtins are actually somewhat easier to grasp, as objects, than these more ephemeral tokens of the Python grammar.\u00a0 Words like \"if\" \"else\" and \"lambda\".\n\nIn any case, I propose we should number our dimensions from zero like Python does.\n\nDimension Zero are the keywords and related punctuation, such as colon, square brackets, quote marks (single and double, then triple of either).\u00a0 Dimension Zero provides the original syntax you'll need to structure your programs, to tell a story of what happens among its several players (the objects). \n\nOnly three of the keywords are uppercase: True, False and None.\u00a0 About 35 in all, for looping, branching, making functions and classes (callables).\u00a0 No keyword is a callable.\u00a0 In prehistoric Python, before the great leap, \"print\" was a keyword, yet today is a built-in function.\n\nBy dimension two, we're looking at \"special names\" (or call them __ribs__), provided by the language, meaning new ones get added from version to version, but they're not for the Python coder to create.\n\nLike the keywords and builtins, we accept them as given.\u00a0 They have that funny look:\u00a0 __getitem__, __getattr__, __setitem__, __setattr__ ... __add__, __mul__ and __call__.\u00a0 With these \"puppet strings\" we're able to control the behavior of our objects down to the syntactical level.\n\nWhat should be the effect of using square brackets right up against my objects?\u00a0 What should it do when \"called\" with curved parentheses?\u00a0 How should two objects of my own devising interpret the addition or multiplication operator?\n\nI'm empowered to devise alternative languages, or to approximate existing ones more closely. M1 @ M2 might result in matrix multiplication, while (f * g)(x) might be massaged to mean the same as f(g(x)).\n\nSuch sinewy flexibility, built right in to the language, could easily become a justification for the snake motif.\u00a0 A snake is a subtype of dragon.\u00a0 Perhaps Python has the connotation of \"dragon language\" in a more Chinese take on computer science.\n\nDimension three: the Standard Library.\u00a0 Here, with \"batteries included\" we reach a frontier.\u00a0 Any Python distribution is likely to come with all of the above, after which we reach dimension four.\n\nDimension four includes anything from simple one-module libraries, to frameworks and distributions.\u00a0 One might further differentiate between these levels, however keeping it all zero to four has its advantages.\n\nWhen I teach Python to others, I'll be specific about these dimensions and then begin spiraling in all five over time.\n\nIn a given lesson, we'll add a couple more keywords here, a special name there, a built-in, and then a module.\n\nBy \"add\" I mean \"add to the student's knowledge base\" i.e. to the student's awareness of a complete ecosystem, still evolving. Python is a moving target, but it's never too late to catch up.\n\nEven core Python is evolving, both as a language specification and in terms of its implementations.\n\nPython has been implemented in C, C#, Java (Jython) and in a more simplified version of itself (PyPy).\u00a0 Python has likely been implemented in languages I don't know about.\n\nThen we have Cython, a superset of Python with more compile time goodness.\n\nWe should expect people not that conversant with this variegated geography (territory) to get somewhat lost in it sometimes.\n\nPartly why I offer these simplifying schematics and \"[dimension talk](https://github.com/4dsolutions/Python5/blob/master/Dimensions%20of%20Python.ipynb)\" is to tame the wilderness or wildness (entropy) and bring some order out of chaos.",
  "categories": [],
  "author": "Kirby Urner",
  "blog_name": "bizmo_diaries"
}