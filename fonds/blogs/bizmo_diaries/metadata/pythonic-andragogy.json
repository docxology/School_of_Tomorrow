{
  "id": "594549650469224076",
  "title": "Pythonic Andragogy",
  "published": "2023-02-28T14:45:00.005-08:00",
  "updated": "2023-03-11T08:06:24.491-08:00",
  "content": "[](https://www.flickr.com/photos/kirbyurner/24749338009/in/album-72177720296706479/)\n\nI am in the process of developing some Python warm-up notebooks, for a cohort coming my way.\u00a0 My role as their instructor, is to dive right away into 3rd party libraries numpy and pandas.\u00a0 That's very doable, this is a logical on-ramp or doorway in.\n\nHowever, there's another part of me that knows you're joining the comic strip late in the game, as some say. There's a lot more to Python than we know. Does that matter?\u00a0 How much Python coding should a student have, when starting in on a first Jupyter Notebook?\u00a0 I have no dogma or catechism on the matter.\n\nWhat I'm playing with though, are these warm-up notebooks, but with an eye to introducing what's to follow.\u00a0 Python is big in server side development, and with PyScript to Webassembly a thing, may soon coexist on the front end somehow.\u00a0 I'm not counting my chickens.\u00a0 The point is that Python forks into many walks of life, as the primitive drawing (above) hopes to illustrate.\n\nI put SQL and SQLAlchemy towards the trunk for a reason.\u00a0 True, Guido is not an SQL hound, that's not his bag.\u00a0 His focus was elegance and simplicity of syntax, if you think that's possible in an object oriented language.\u00a0 Is English object oriented?\u00a0 Sure.\u00a0 It's oriented around objects (or call them things), which come in types.\n\nSpeaking of types, what I'm thinking is a little groundbreaking, is I throw the function type into the mix, as another type, a callable type.\u00a0 Then we have instances of the function type.\u00a0 No, we don't get to them with keyword class, but keyword def instead.\u00a0 That fits our brains.",
  "categories": [],
  "author": "Kirby Urner",
  "blog_name": "bizmo_diaries"
}