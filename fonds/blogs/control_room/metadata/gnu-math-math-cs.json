{
  "id": "1051766576880232374",
  "title": "GNU Math = Math + CS",
  "published": "2017-09-19T16:48:00.004-07:00",
  "updated": "2017-09-19T16:53:01.842-07:00",
  "content": "[[first shared on math-teach](http://mathforum.org/kb/thread.jspa?threadID=2881265), Math Forum @ Drexel, with no pictures ]\n\n[](https://www.flickr.com/photos/kirbyurner/37191702171/in/dateposted-public/)\n\n:: factors(84729293) ::\n\nRhymes with \"New Math\"...\n\nI think we all know the pun by now: GNU stands for GNU is Not Unix.\n\nHowever in being recursively defined, it's also an allusion to Lambda\nCalculus.\n\nGNU came along around Gen 2.0 of the C-STEM Epoch, which Epoch started\naround PLATO (1960) and rolled through at least two revolutions: PC\n(personal computer) and Liberation (free / open source).\n\nLiberation was a long fought battle pitting the likes of GNU / Linux\nagainst SCO. I'm sure some here remember those years, followed by Browser\nWars...\n\nWhere C-STEM starts hybridizing with the contemporary public schools math\nsequence is around the Fundamental Theorem of Arithmetic, that every\ninteger has a unique prime factorization.\n\nI'm going with Conway's suggestion that we throw in -1 as a factor along\nwith 1, go ahead and call the former prime if you like.\n\nA prime has only itself and 1 as a factor, and -1 if negative. 1 itself is\nnot prime.\n\nWhen we say factors, we may include or omit the 1 (identity element)\ndepending on context.\n\nfactors(42)\n(1, 2, 3, 7)\nfactors(100)\n(1, 2, 2, 5, 5)\nfactors(-12)\n(1, -1, 2, 2, 3)\n\nWhen students are ready to write code, in whatever language, to deliver\nthese unique prime factorizations, that's when CS starts to meet Algebra.\nThe Sieve of Eratosthenes, Trial By Division, Euclid's Algorithm, start\nphasing in here, as things to code.\n\nYes, we're still doing arithmetic, using the four basic operators plus\nmodulo (%), but we're also introducing functions, the composition of which\nwill be our basis for getting work done.\n\nAlgebra has much to do with controlling the components of a function, one\nmight say inputs, arguments or parameters. The specifics are often fixed\nwith constants, as in:\n\nA sin (Bx + C) + D\n\nthe paradigm oscillator. Only x is considered the dependent variable at\nthe end of the day, as A, B, C, D are used to construct a special case\nfunction.\n\nPolynomials are the same way. The coefficients fix the function, and then\nx or t do the heavy lifting.\n\nA*x**3 + B*x**2 + C*x + ... we have notation for arbitrarily long lists.\n\nCS is good at this: providing an executable language wherein functions\nhave the ability to construct other functions.\n\nCS profs further along in the pipeline will be grateful if we start writing\nfunctions that build functions earlier.\n\nC-STEM has a bright future.\n\n[](https://www.flickr.com/photos/kirbyurner/36522033103/in/dateposted-public/)\n\n::\u00a0(1, 11, 31, 248473)\u00a0::",
  "categories": [],
  "author": "Kirby Urner",
  "blog_name": "control_room"
}