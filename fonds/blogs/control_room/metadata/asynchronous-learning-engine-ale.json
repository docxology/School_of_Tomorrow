{
  "id": "6541091069398204595",
  "title": "Asynchronous Learning Engine (ALE)",
  "published": "2015-08-02T10:46:00.000-07:00",
  "updated": "2015-08-22T10:55:03.322-07:00",
  "content": "[](https://www.flickr.com/photos/kirbyurner/17304692495/in/album-72157654417641521/)\n\nI created a stub outline of an Asynchronous Learning Engine on GitHub today (link below).\u00a0 That may sound impressive however all the classes are abstract stubs, with an underlying metaphor.\u00a0 The implementation is left as an exercise.\n\nThe metaphor (living at the base class level) centers on picturing airplane flights as courses of study, with a beginning, middle and end.\u00a0 One could do ships and cruises -- hey, they're just metaphors, feel free to mix 'em.\u00a0 \"Geek cruises\"are a reality already, including of the non-metaphoric kind.\n\nNames like Student, Course, Mentor make up the foreground, but without leaving our extended metaphors behind.\u00a0 The course fills to a minimum, gets start and stop dates, but in many models students manage their own time (talking months) and finish anytime before deadline.\n\nSome are in a hurry, some not.\u00a0 Some have time to study hard, others have only tiny windows in their day, to inch ahead.\u00a0 Few if any synchronized events are required therefore.\u00a0 It's not about all moving in lockstep, even if in the same course.\u00a0 That doesn't preclude some exercises involving a stop watch or timer.\n\nThe Flight Recorder (built in to the Course or Airplane class) saves the transactions, meaning submitted and handed back work, communications to and from a mentor. Quality Assurance (QA) is about going over these records and learning from them.\n\n[](https://www.flickr.com/photos/kirbyurner/20014016398/in/album-72157654417641521/)\n\nFeedback loops are the name of the game.\u00a0 Mentors improve by learning from each turn in the cockpit, perhaps we have co-pilots (like co-clerks, of committees).\u00a0 One might be the apprentice of the other in one course, the senior pilot in another.\u00a0 Mentors are students themselves as there's never a shortage of new stuff to learn, new skills to pick up.\n\nSome designs encourage chatter amongst the passengers however more typical is the private one-on-one experience, with the mentor interacting individually with everyone and anyone in the course (or courses -- in this world a mentor may fly several airplanes simultaneously, called \"multi-tasking\", just as a student may take more than one course at a time, just like in college).\n\nWhat I envision as a typical use case are EC2 / AWS (Amazon) type implementations of the Personal Studio or Personal Workspace (PWS) model, such that learners remote in to their personal Ubuntu or whatever, the instance pre-configured per whatever course design.\n\nAre we doing [2D & 3D graphics](http://mybizmo.blogspot.com/2015/08/stem-carbon-as-theme.html)?\u00a0 Is [VPython](http://vpython.org/) installed?\u00a0 That all depends on the course, although presumably there are many parts of the Ux (user experience) that are common to all courses, giving a branded and perhaps eventually familiar, look and feel.\u00a0 A student might work on more than one course within a given PWS instance.\n\nContainerized services at the other end of a student dashboard given [the \"traveler\"](http://mybizmo.blogspot.com/2010/02/learning-on-line.html) (wanderer, browser, tourist, visitor, guest... scout) a way to \"book flights\" including with \"connecting flights\".\n\nThe mentor dashboard shows the task queues (see source outline below).\n\nStudent and mentor are connected asynchronously through the ALE.\u00a0 That's it's primary job, to glue together all the components required to run an airline (or railroad, if you prefer).\n\nFor example:\u00a0 { Ruby\n                        \u21a3 Rails \n                        \u21a3 JavaScript in the Browser (including JQuery) \n                        \u21a3 JS on the Server } would earn a merit badge or certificate in our \"learning by doing\" space (hiking trail metaphors apply also -- [as in scouting](http://mathforum.org/kb/message.jspa?messageID=9748346)).\n\nI've been looking at { Python \u21a3 Java \u21a3 Clojure }\u00a0 as a set of connecting flights, perhaps spanning [grades 10 to 16](https://mail.python.org/pipermail/edu-sig/2015-August/011290.html).\u00a0 The ALE does not nail down curriculum content per se.\u00a0 Its job is to organize students into courses, assign them mentors, and keep things moving forward towards completion.\u00a0 Course designers have a known framework to work with -- whatever version of ALE the client / school uses.\u00a0 \n\nMentors, like students, have different availability, different schedules, as well as areas of expertise.\u00a0 That's where Air Traffic Controlling (Dispatching) comes in.\u00a0 We need admin to help us with load balancing such that no one mentor burns out under the caseload.\u00a0\u00a0\n\n\"Adding to the fleet\" where demand is high is easy with ALE (our in-house system, not Open Source, isn't called that).\u00a0 Smaller more esoteric courses may have higher marginal costs, but add to a school's luster in other ways (guest mentors may be celebs in their fields).\n\nColleges and universities may be set in their ways and may as yet have no internal \n\"dog food\" they might eat and/or modify, nothing Open Source to share and partake in.\u00a0\u00a0\n\nSometimes upstart companies, \nincluding not-for-profits, NGOs, are better positioned to try new \nthings.\u00a0 ALE is not just another Moodle or Banner.\u00a0 \n\nFor further reading:\n[ALE Use Case](http://worldgame.blogspot.com/2015/07/pws-personal-workspace.html)\n[GitHub Repo](https://github.com/4dsolutions/async_learning_engine)\n[clojure-python](https://clojars.org/clojure-python)",
  "categories": [],
  "author": "Kirby Urner",
  "blog_name": "control_room"
}