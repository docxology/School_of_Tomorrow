{
  "id": "5951222464077755425",
  "title": "Back on that Python Train",
  "published": "2016-12-18T10:31:00.000-08:00",
  "updated": "2016-12-19T17:44:59.668-08:00",
  "content": "[](https://www.flickr.com/photos/kirbyurner/31590014101/in/dateposted-public/)\n\nBy \"Python Train\" I mean the succession of versions, fine to come in from the top i.e. no reason to go back and learn older ones, unless you inherit responsibility for older code.\u00a0 I've got quite a bit of 2.x on the web, [at Oregon Curriculum Network](http://4dsolutions.net/ocn/).\n\nHowever 3.6 is out, final release candidate, with the first official non-candidate set for release on the 23rd.\u00a0 I've learned about formatting strings from Chris, [CTO at PDX Code Guild](https://youtu.be/TKhgl38EPPg?t=28s).\n\nBut only recently, in coming late to [various debates](https://eev.ee/blog/2016/07/31/python-faq-why-should-i-use-python-3/), did I get a longer run-down of new features, which inevitably include many other less new ones I'd been overlooking.\n\nSince I'm in the teaching biz and like any professional have to keep doing homework, working on updating skills with latest new wrinkles, I'm taking advantage of [snow days](http://worldgame.blogspot.com/2016/12/sampling-python-tutorials.html), with power, to bone up and stay with it.\n\nThere's a sense of being on a moving train here.\u00a0 Time to move along.\u00a0 Inertia.\n\nWe always do a Hanukkah party this time of year, though we're Quakers and all that. Great traditions. good times, great peeps. My family is all spread out.\u00a0 White Christmas in Portland (actually not yet, this is in the lead up to), snow and ice both.\n\nOf course I'm thinking of Lindsey's \"...get on that train\" lyrics (and melody).\u00a0 She later moved it to Spanish.\u00a0 I caught [a version for Youtube](https://youtu.be/h923W5h3-oM) some years ago.\u00a0 Merry Christmas Lindsey wherever you are. I hope we cross paths sometime in 2017.\n\nFor those of you squinting at the code above (click picture for original, bigger), yes, all \"clerks\" (what I'm calling them) named \"sentinel\" or \"nigel\" or whatever, will file to the same key.\n\nBefore you throw up your hands and yell \"bug!\" or \"security risk!\" or whatever, remember a use case where we have freeway cams all along the highway.\u00a0 All cams file to \"see it!\" and all users of \"last_seen\" have it in them already, no need to \"subscribe\" (you did that by naming the clerk as the others did).\n\nThe version below assumes we need to keep each value stored with its specific instance, including across types (instances serve as unique keys regardless of type).\u00a0 What you need from your clerk type varies with use case; Python gives you the \"hooks\" (the places to fill in the script).\u00a0 For consenting adults (one of the tag lines).\u00a0 Batteries included.\u00a0 Fits your brain.\n\nThe takeaway is one does need a clear head, to keep track of what \"self\" means when several classes have instanced the clerk as a class-level name.\n\nThe clerk has a window orthogonal to the type structure, or \"the committees\" one might say, is privy to what goes on across instances.\u00a0 Must it keep all those instances straight?\u00a0 Or is the goal to share information?\u00a0 Or both?\u00a0 The language is more about allowing than dictating your designs.\n\nSo just remember to document clearly and tell a compelling story to future maintainers, or they'll end up rewriting it just to keep track of what's going on.\u00a0 Don't just assume the code \"will speak for itself\" \u2014 to you it might, but remember the other people in the room.\n\n[](https://www.flickr.com/photos/kirbyurner/31352623520/in/dateposted-public/)",
  "categories": [],
  "author": "Kirby Urner",
  "blog_name": "control_room"
}