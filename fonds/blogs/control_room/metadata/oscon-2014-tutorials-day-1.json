{
  "id": "1386532114334763568",
  "title": "OSCON 2014 Tutorials (Day 1)",
  "published": "2014-07-20T09:50:00.001-07:00",
  "updated": "2015-08-10T08:18:48.724-07:00",
  "content": "My notes from: [The Simplicity of Clojure](http://www.oscon.com/oscon2014/public/schedule/detail/33947) presented by Clinton Dreisbach and Bridget Hillyer.\n\nCollections in Clojure:\u00a0 Vectors, Lists, Maps, Sets.\n\nVectors are heterogeneous, as are all the collections, so like Python's lists. Also 0-based.\n\n(nth [3 6 9] 1) ;=> 6.\n\nA List is a unit of execution in that the first element is the function. Above: [3 6 9] is the Vector whereas (nth ...) is a List.\n\nCollections are also immutable, like Python's tuples, so (conj (list 1 2) 3) ;=> (3 1 2).\n\nMaps are similar to Python dicts.\u00a0 Why are they associative again?\u00a0 Sets (#) are like Python sets: no duplicates\n\n:keywords have a magical property of serving as functions. (:a {:a 1}) ;=> 1.\n\nA :keyword is a symbol that evaluates to itself. \n\nFunction names (symbols) are common to all the collections wherever that makes sense.\u00a0 This has to do with their all being Sequences (not just Collections).\u00a0 The laziness of the Sequence should evoke Pythonic ideas of lazy iteration, as well as the general notion of sequence.\n\nStrings are not sequences but get coerced into same in using sequence functions:\n\n(first \"this is it\") ;=> \\t\n\n...where \\t is the character type.\n\nPython's special names enforce a kind of uniformity across types.\u00a0 We get to the syntax level with __getitem__ and __getattr__ i.e. obj[x] and obj.x are things we define within the obj type.\n\nFirst exercise (I'm in a tutorial): \n\n(list \"Professor Plum\" \"Mrs. Peacock\" \"Mr. Green\" \"Mrs. White\" \"Colonel Mustered\" \"Miss scarlet\")\n\n(nth (list \"Professor Plum\" \"Mrs. Peacock\" \"Mr. Green\" \"Mrs. White\" \"Colonel Mustered\" \"Miss scarlet\") 3) ;=> \"Mrs. White\"\n\nThey had us [download LightTable](http://www.lighttable.com/) to follow along.\u00a0 Here are [the slides](http://bridgethillyer.github.io/simplicity-ws/).\u00a0 LightTable works with Python as well!\n\nI met up with Tatia and Ed Leafe at the break.\u00a0 Ed shares my FoxPro lineage.\u00a0 Tatia is fresh off the plane from Brazil.\u00a0 She's a Pythonista, like Ed and myself, fluent in both English and Portuguese.\u00a0 We compared notes on Ruby (another OO language like Python) and clojure (functional, more LISP-like).\n\nIn a local scope, function let takes a Vector to give its bindings.\u00a0 defn contracts def and fn.\n\nThanks to prefix notation, the hyphen is fine in variable names (symbols), no confusion with the minus symbol.\n\nPolymorphism:\u00a0 how?\u00a0 If you don't have objects.\u00a0 multi-methods maybe.\u00a0 Helps to know some Java maybe as defrecord relates to Java's classes and interfaces.\u00a0 \"Make a Piece protocol\" to model chess pieces, say with possible-moves and can-move? as methods.\u00a0 OO thinking involves dispatching. \n\nFunctional reactive programming:\u00a0 Javelin treats your data like a spreadsheet.\u00a0 Check [core.matrix](https://github.com/clojure-numerics) for an example of professional clojure code.\u00a0 What's [ClojureScript](http://clojurescriptone.com/)?\u00a0 Read more at [Hoplon.io](http://hoplon.io/).\n\nFor further reading:\u00a0 [Clojure for the Brave and True](http://www.braveclojure.com/).",
  "categories": [],
  "author": "Kirby Urner",
  "blog_name": "control_room"
}